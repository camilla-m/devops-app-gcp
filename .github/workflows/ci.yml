name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Testes e qualidade de código
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @eslint/js
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests only
      run: npm run test:unit
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: success()

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test  # Só roda após os testes unitários passarem
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create .env file for testing
      run: |
        echo "NODE_ENV=test" >> .env
        echo "DATABASE_URL=postgresql://test:test@localhost:5432/testdb" >> .env
        # Adicione outras variáveis necessárias para os testes
    
    - name: Build and start Docker containers
      run: |
        docker compose -f docker-compose.yml -f docker-compose.test.yml up -d --build
        
    - name: Wait for services to be ready
      run: |
        echo "Aguardando serviços ficarem prontos..."
        # Aguarda o banco de dados estar pronto
        timeout 300 bash -c 'until docker compose exec -T db pg_isready -U test -d testdb; do echo "Waiting for DB..."; sleep 2; done' || true
        
        # Aguarda a aplicação estar pronta
        timeout 300 bash -c 'until curl -s http://localhost:3000/health > /dev/null; do echo "Waiting for app..."; sleep 2; done'
        
    - name: Check container status
      run: |
        echo "=== Container Status ==="
        docker compose ps
        echo "=== Container Logs ==="
        docker compose logs --tail=50
        
    - name: Run database migrations (if needed)
      run: |
        # Se você usa migrations, rode aqui
        # docker compose exec -T app npm run db:migrate
        echo "Skipping migrations - adjust as needed"
        
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        npm run test:integration
        
    - name: Collect test results
      if: always()
      run: |
        # Se você gera relatórios de teste, colete-os aqui
        mkdir -p test-results
        # cp test-output/* test-results/ || true
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: test-results/
        retention-days: 7
        
    - name: Cleanup Docker containers
      if: always()
      run: |
        docker compose logs app > app-logs.txt || true
        docker compose down -v --remove-orphans || true

  # Job 2: Scanning de segurança
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main

  # Job 3: Build e teste do Docker
  docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: devops-app-gcp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run -d --name test-app -p 3000:3000 devops-app-gcp:test
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        curl -f http://localhost:3000/api/info || exit 1
        docker stop test-app
        docker rm test-app