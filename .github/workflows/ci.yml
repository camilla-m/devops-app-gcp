name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Testes e qualidade de código
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npm install --save-dev @eslint/js
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests only
      run: npm run test:unit
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: success()

  integration-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Set up Docker Compose
      run: |
        # Usar docker compose (novo formato) ao invés de docker-compose
        docker compose version || {
          echo "Instalando Docker Compose..."
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
        }

    - name: Build Docker containers
      run: docker-compose up -d --build
      
    - name: Wait for services to be ready
      run: |
        echo "Waiting for services..."
        timeout 300 bash -c 'until docker-compose ps | grep "Up"; do sleep 5; done'
        
    - name: Check container health
      run: |
        docker-compose ps
        docker-compose logs
        
    - name: Run integration tests
      run: |
        if docker-compose ps | grep -q "Up"; then
          npm run test:integration
        else
          echo "Docker containers failed to start - skipping integration tests"
          exit 1
        fi

  # Job 2: Scanning de segurança
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main

  # Job 3: Build e teste do Docker
  docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: devops-app-gcp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run -d --name test-app -p 3000:3000 devops-app-gcp:test
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        curl -f http://localhost:3000/api/info || exit 1
        docker stop test-app
        docker rm test-app